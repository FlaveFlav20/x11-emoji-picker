name: Build

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  BUILD_TYPE: Release
  DEBIAN_FRONTEND: noninteractive

jobs:
  build-artifact:
    runs-on: ubuntu-latest
    container:
      image: ${{matrix.image}}
      options: --privileged
    strategy:
      matrix:
        image: ['ubuntu:20.04', 'ubuntu:18.04', 'debian:bullseye', 'debian:buster', 'debian:stretch']
        # 'opensuse/leap:15.3', 'opensuse/leap:15.2', 'opensuse/leap:15.1'
        # 'fedora:35', 'fedora:34', 'fedora:33'
        # 'centos:centos8'
      fail-fast: false

    steps:
      - name: Install dependencies (ubuntu & debian)
        if: startsWith(matrix.image, 'ubuntu') || startsWith(matrix.image, 'debian')
        run: apt update && apt install -y wget file dpkg-dev fuse g++ cmake qtbase5-dev libicu-dev libxdo-dev

      - name: Install dependencies (debian:stretch)
        if: startsWith(matrix.image, 'debian:stretch')
        run: apt install qt5-default

      - name: Install dependencies (opensuse)
        if: startsWith(matrix.image, 'opensuse')
        run: zypper install -y tar gzip wget rpm-build gcc-c++ cmake libqt5-qtbase-devel libicu-devel xdotool-devel

      - name: Install dependencies .AppImage
        if: startsWith(matrix.image, 'debian:stretch')
        run: |
          wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          cp ./linuxdeployqt-continuous-x86_64.AppImage /usr/bin/linuxdeployqt.AppImage

      - uses: actions/checkout@v2

      - name: Configure (ubuntu / debian)
        if: startsWith(matrix.image, 'ubuntu') || startsWith(matrix.image, 'debian')
        env:
          CPACK_GENERATOR: DEB
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ..

      - name: Configure (opensuse / fedora / centos)
        if: startsWith(matrix.image, 'opensuse') || startsWith(matrix.image, 'fedora') || startsWith(matrix.image, 'centos')
        env:
          CPACK_GENERATOR: RPM
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ..

      - name: Build
        run: |
          cd build
          make

      - name: Package
        run: |
          cd build
          make package

      - name: Package .AppImage
        if: "startsWith(matrix.image, 'debian:stretch')"
        run: |
          cd build
          make appimage

      - name: Fix image name
        run:
          RAW_IMAGE="${{ matrix.image }}"
          IMAGE=$(echo $RAW_IMAGE | sed 's/\//-/' | sed 's/:/-/')
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Upload artifact .deb (ubuntu / debian)
        if: startsWith(matrix.image, 'ubuntu') || startsWith(matrix.image, 'debian')
        uses: actions/upload-artifact@v2.2.4
        with:
          name: x11-emoji-picker-x86_64-${{env.IMAGE}}.deb
          path: build/x11-emoji-picker-x86_64.deb

      - name: Upload artifact .rpm (opensuse / fedora / centos)
        if: startsWith(matrix.image, 'opensuse') || startsWith(matrix.image, 'fedora') || startsWith(matrix.image, 'centos')
        uses: actions/upload-artifact@v2.2.4
        with:
          name: x11-emoji-picker-x86_64-${{env.IMAGE}}.rpm
          path: build/x11-emoji-picker-x86_64.rpm

      - name: Upload artifact .AppImage
        if: startsWith(matrix.image, 'debian:stretch')
        uses: actions/upload-artifact@v2.2.4
        with:
          name: x11-emoji-picker-x86_64.AppImage
          path: build/x11-emoji-picker-dev-x86_64.AppImage

  create-nightly-release:
    needs: build-artifact
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/master')

    steps:
      - name: Create release
        id: create_release
        uses: pajlada/create-release@v2.0.3
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: nightly-build
          release_name: Nightly Release
          body: |
            Nightly Build
          prerelease: true

      - name: Download artifacts
        uses: actions/download-artifact@v2.0.10
        with:
          path: artifacts

      - name: Display downloaded artifacts
        run: ls -R ${{steps.download_ubuntu_deb.outputs.download-path}}

      - name: Upload release assets
        uses: alexellis/upload-assets@0.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_paths: '["${{steps.download_ubuntu_deb.outputs.download-path}}/*/*"]'
