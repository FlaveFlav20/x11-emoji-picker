name: Build

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  BUILD_TYPE: Release
  DEBIAN_FRONTEND: noninteractive

jobs:
  build-artifact:
    runs-on: ubuntu-latest
    container:
      image: ${{matrix.image}}
      options: --privileged
    strategy:
      matrix:
        image: ['ubuntu:22.04', 'ubuntu:21.10', 'ubuntu:20.04', 'ubuntu:18.04', 'debian:11', 'debian:10', 'debian:9', 'opensuse/leap:15.3', 'opensuse/leap:15.2', 'opensuse/leap:15.1', 'fedora:36', 'fedora:35', 'fedora:34', 'fedora:33']
        # 'centos:centos8'
      fail-fast: false

    steps:
      - name: Install dependencies (ubuntu & debian)
        if: startsWith(matrix.image, 'ubuntu') || startsWith(matrix.image, 'debian')
        run: apt update && apt install -y wget file dpkg-dev fuse g++ cmake qtbase5-dev libicu-dev libxdo-dev

      - name: Install dependencies (debian:9)
        if: startsWith(matrix.image, 'debian:9')
        run: apt install qt5-default

      - name: Install dependencies (opensuse)
        if: startsWith(matrix.image, 'opensuse')
        run: zypper install -y tar gzip wget rpm-build gcc-c++ cmake libqt5-qtbase-devel libicu-devel xdotool-devel

      - name: Install dependencies (fedora & centos)
        if: startsWith(matrix.image, 'fedora') || startsWith(matrix.image, 'centos')
        run: dnf install -y tar gzip wget rpm-build gcc-c++ cmake qt5-qtbase-devel libicu-devel libxdo-devel

      - name: Install dependencies .AppImage
        if: startsWith(matrix.image, 'debian:9')
        run: |
          wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          cp ./linuxdeployqt-continuous-x86_64.AppImage /usr/bin/linuxdeployqt.AppImage

      - uses: actions/checkout@v2

      - name: Configure (ubuntu / debian)
        if: startsWith(matrix.image, 'ubuntu') || startsWith(matrix.image, 'debian')
        env:
          CPACK_GENERATOR: DEB
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ..

      - name: Configure (opensuse / fedora / centos)
        if: startsWith(matrix.image, 'opensuse') || startsWith(matrix.image, 'fedora') || startsWith(matrix.image, 'centos')
        env:
          CPACK_GENERATOR: RPM
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ..

      - name: Build
        run: |
          cd build
          make

      - name: Package
        run: |
          cd build
          make package

      - name: Package .AppImage
        if: "startsWith(matrix.image, 'debian:9')"
        run: |
          cd build
          make appimage

      - name: Create artifact name
        run: |
          DISTRO_ID=$(grep "^ID=" "/etc/os-release" | sed "s/ID=//")
          DISTRO_VERSION_ID=$(grep "^VERSION_ID=" "/etc/os-release" | sed "s/VERSION_ID=//" | sed "s/\"//g")
          ARTIFACT_NAME=x11-emoji-picker-x86_64
          ARTIFACT_NAME_WITH_DISTRO=$ARTIFACT_NAME-$DISTRO_ID-$DISTRO_VERSION_ID
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_WITH_DISTRO=$ARTIFACT_NAME_WITH_DISTRO" >> $GITHUB_ENV
          echo "ARTIFACT_NAME_WITH_DISTRO=$ARTIFACT_NAME_WITH_DISTRO"

      - name: Rename artifact .deb (ubuntu / debian)
        if: startsWith(matrix.image, 'ubuntu') || startsWith(matrix.image, 'debian')
        run: |
          mv build/x11-emoji-picker-x86_64.deb build/${{env.ARTIFACT_NAME_WITH_DISTRO}}.deb

      - name: Rename artifact .rpm (opensuse / fedora / centos)
        if: startsWith(matrix.image, 'opensuse') || startsWith(matrix.image, 'fedora') || startsWith(matrix.image, 'centos')
        run: |
          mv build/x11-emoji-picker-x86_64.rpm build/${{env.ARTIFACT_NAME_WITH_DISTRO}}.rpm

      - name: Rename artifact .AppImage
        if: "startsWith(matrix.image, 'debian:9')"
        run: |
          mv build/x11-emoji-picker-dev-x86_64.AppImage build/${{env.ARTIFACT_NAME}}.AppImage

      - name: Upload artifact .deb (ubuntu / debian)
        if: startsWith(matrix.image, 'ubuntu') || startsWith(matrix.image, 'debian')
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.ARTIFACT_NAME_WITH_DISTRO}}.deb
          path: build/*.deb
          if-no-files-found: error

      - name: Upload artifact .rpm (opensuse / fedora / centos)
        if: startsWith(matrix.image, 'opensuse') || startsWith(matrix.image, 'fedora') || startsWith(matrix.image, 'centos')
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.ARTIFACT_NAME_WITH_DISTRO}}.rpm
          path: build/*.rpm
          if-no-files-found: error

      - name: Upload artifact .AppImage
        if: startsWith(matrix.image, 'debian:9')
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.ARTIFACT_NAME}}.AppImage
          path: build/*.AppImage
          if-no-files-found: error

  create-nightly-release:
    needs: build-artifact
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Create nightly
        id: create_release
        uses: pajlada/create-release@v2
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: nightly-build
          release_name: Nightly Release
          body: |
            Nightly Build
          prerelease: true

      - name: Download artifacts
        id: download_artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Display downloaded artifacts
        run: ls -R ${{steps.download_artifacts.outputs.download-path}}

      - name: Upload release assets
        uses: GaZaTu/release-asset-action@v3
        with:
          pattern: "${{steps.download_artifacts.outputs.download-path}}/**/*"
          github-token: ${{secrets.GITHUB_TOKEN}}
          release-url: ${{steps.create_release.outputs.upload_url}}

  create-release:
    needs: build-artifact
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{github.ref}}
          release_name: Release ${{github.ref}}

      - name: Download artifacts
        id: download_artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Display downloaded artifacts
        run: ls -R ${{steps.download_artifacts.outputs.download-path}}

      - name: Upload release assets
        uses: GaZaTu/release-asset-action@v3
        with:
          pattern: "${{steps.download_artifacts.outputs.download-path}}/**/*"
          github-token: ${{secrets.GITHUB_TOKEN}}
          release-url: ${{steps.create_release.outputs.upload_url}}
